{"version":3,"sources":["reportWebVitals.js","Button.js","Icon.js","Content.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StyledButton","styled","button","primary","Button","text","className","StyledIcon","div","readiness","border","status","Icon","Section","Title","h1","SubTitle","ParagraphTitle","ReversedTitle","props","children","split","reverse","Content","as","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,4BCDRQ,EAAeC,IAAOC,OAAV,4PACF,qBAAEC,QAAuB,MAAQ,WAyBlCC,EAVA,SAAC,GAAqB,IAApBD,EAAmB,EAAnBA,QAASE,EAAU,EAAVA,KACxB,OACE,eAACL,EAAD,CAAcG,QAASA,EAAvB,UACGE,EACD,mBAAGC,UAAU,UAAb,0BCxBAC,EAAaN,IAAOO,IAAV,4MACA,YAAkB,IAAhBC,EAAe,EAAfA,UACd,MAAkB,UAAdA,EAA8B,SACX,WAAdA,EAA+B,SACjB,OAAdA,EAA2B,QACxB,SAEJ,qBAAEC,QAAsB,oBAGnB,YAAe,IAAbC,EAAY,EAAZA,OACf,MAAe,gBAAXA,EAAiC,WACjB,SAAXA,EAA2B,eAA/B,KAcMC,EANF,SAAC,GAAiC,IAAhCF,EAA+B,EAA/BA,OAAQD,EAAuB,EAAvBA,UAAWE,EAAY,EAAZA,OAChC,OACE,cAACJ,EAAD,CAAYG,OAAQA,EAAQD,UAAWA,EAAWE,OAAQA,KCpBxDE,EAAUZ,IAAOO,IAAV,kJAQPM,EAAQb,IAAOc,GAAV,sEAKLC,EAAWf,YAAOa,EAAPb,CAAH,mDAIRgB,EAAiBhB,YAAOe,EAAPf,CAAH,4CAIdiB,EAAgB,SAAAC,GAAK,OACzB,cAACF,EAAD,2BAAoBE,GAApB,IAA2BC,SAAUD,EAAMC,SAASC,MAAM,IAAIC,cAgBjDC,EAdC,WACd,OACE,eAACV,EAAD,WACE,cAACC,EAAD,mCACA,cAACE,EAAD,8BACA,cAAC,EAAD,CAAQb,SAAO,EAACE,KAAK,aACrB,cAAC,EAAD,CAAQA,KAAK,cACb,cAAC,EAAD,CAAMK,OAAO,YAAYD,UAAU,UACnC,cAAC,EAAD,CAAME,OAAO,gBACb,cAACM,EAAD,CAAgBO,GAAIN,EAApB,wCC/BNO,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,8CACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BtC,M","file":"static/js/main.b137b4ee.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import styled from 'styled-components'\n\n// polymorphic prop, not used now\nconst ReversedText = props =>\n  <StyledButton {...props} children={props.children.split('').reverse()} />\n\nconst StyledButton = styled.button `\n  background: ${({primary}) => primary ? 'red' : 'blue '};\n  border-radius: 1rem;\n  color: white;\n  cursor: pointer;\n  font-size: 1rem;\n  margin: .25rem;\n  padding: .25rem;\n  &:hover {\n    background: teal;\n  }\n  .subtext {\n    font-size: .75rem;\n  }\n`\n\nconst Button = ({primary, text}) => {\n  return (\n    <StyledButton primary={primary}>\n      {text}\n      <p className='subtext'>Sub text</p>\n    </StyledButton>\n    // <StyledButton as={ReversedText} primary={primary}>{text}</StyledButton>\n  )\n}\n\nexport default Button\n","import styled from 'styled-components'\n\nconst StyledIcon = styled.div `\n  background: ${({readiness}) => {\n    if (readiness === 'ready') return 'yellow'\n    else if (readiness === 'steady') return 'orange'\n    else if (readiness === 'go') return 'green'\n    else return 'red'\n  }};\n  border: ${({border}) => border || '3px solid blue'};\n  border-radius: 100%;\n  margin: .5rem;\n  margin-left: ${({status}) => {\n    if (status === 'in-progress') return '4.375rem'\n    else if (status === 'done' ) return '8.75rem'\n  }};\n  height: 2rem; width: 2rem;\n  &:hover {\n    background: lightgreen;\n  }\n`\n\nconst Icon = ({border, readiness, status}) => {\n  return (\n    <StyledIcon border={border} readiness={readiness} status={status} />\n  )\n}\n\nexport default Icon\n","import styled from 'styled-components'\nimport Button from './Button'\nimport Icon from './Icon'\n\nconst Section = styled.div `\n  background-color: #aac9f0;\n  display: flex;\n  flex-direction: column;\n  color: #f0aeaa;\n  border-radius: 15px;\n`\n\nconst Title = styled.h1 `\n  align-self: center;\n  color: #aaecf0;\n`\n\nconst SubTitle = styled(Title)`\n  font-size: .875rem;\n`\n\nconst ParagraphTitle = styled(SubTitle) `\n  color: gray;\n`\n\nconst ReversedTitle = props =>\n  <ParagraphTitle {...props} children={props.children.split('').reverse()} />\n\nconst Content = () => {\n  return (\n    <Section>\n      <Title>ðŸ’… Section</Title>\n      <SubTitle>I am a subtitle</SubTitle>\n      <Button primary text='Me first' />\n      <Button text='Me second' />\n      <Icon border='3px solid' readiness='ready' />\n      <Icon status='in-progress' />\n      <ParagraphTitle as={ReversedTitle}>I am a paragraph title</ParagraphTitle>\n    </Section>\n  )\n}\n\nexport default Content\n\n//Mini Challenge\n//Can you make both icons change colour on hover?\n\n//Mini Challenge\n//based on the if else statement for the status, can you add your own if else statement\n//that will render the green button like a traffic light, based on a prop we pass\n//through? Please get rid of the 'primary' prop that controls the background-color to\n//do this.\n\n//Mini Challenge\n//Based on the way we added a border to the Primary Icon, can you make the default\n//border blue.\n\n//Mini Challenge\n// In the same way that we over-rode the style of the Title Component, I would like\n// you to do the same for the SubTitle component, and make a ParagraphTitle that\n//is grey. Put it at the bottom of the Section.\n\n//Mini Challenge\n// In the same way that we added a primary and secondary prop to the two Buttons, can\n// you add two circles, or â€˜Iconsâ€™ below the Buttons, but make them as a functional\n//component that we import into the Content Component. I want the primary Icon to\n//be Green and the secondary to be Yellow.\n\n//Mini Challenge\n// In this mini challenge I would like you to help me out for the next section by\n// adding two plain white buttons with the words 'Click me' in each below the word\n// Section. Please use the approach we have learnt today.\n// We will need this for the next scrim.\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Content from './Content';\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1>Hello World!</h1>\n    <Content />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}